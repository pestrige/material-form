{"version":3,"sources":["types/types.ts","utils/validates.ts","hooks/useInput.ts","hooks/useFile.ts","utils/common.ts","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["InputNames","checkInputs","value","type","setErrorText","required","email","test","toLowerCase","message","trim","length","getIsSubmitDisabled","inputs","fileError","key","name","props","lastname","error","useInput","initial","useState","setValue","helperText","setHelperText","onChange","evt","targetValue","target","onBlur","Boolean","MAX_FILE_SIZE","encodeToBase64","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","split","fakeSendData","data","json","JSON","stringify","console","log","setTimeout","selectOptions","label","Form","isLoading","setIsLoading","setFile","setError","errorText","files","loadedFile","size","useFile","select","inputsCount","Object","keys","handleSubmit","a","preventDefault","dataToAPI","messageType","image","then","swal","onSubmit","Typography","variant","component","align","mb","pt","Grid","container","justifyContent","spacing","p","values","map","index","ownProps","item","xs","order","md","TextField","fullWidth","rows","undefined","multiline","FormHelperTextProps","sx","position","top","MenuItem","Button","height","hidden","accept","FormHelperText","disabled","App","alignItems","minHeight","Paper","elevation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qJAEYA,E,2KAAAA,K,YAAAA,E,oBAAAA,E,cAAAA,E,kBAAAA,E,iBAAAA,M,KCCZ,IAKaC,EAAc,SACzBC,EACAC,EACAC,EACAC,GAMA,OAHID,GADHF,GAASG,EACO,oGACA,IAETF,GACN,KAAKH,EAAWM,MAfP,uJACDC,KAeSL,EAfEM,eAiBbJ,EAAa,IADbA,EAAa,kFAEjB,MACF,KAAKJ,EAAWS,QACdP,EAAMQ,OAAOC,OAAS,GAClBP,EAAa,gKACbA,EAAa,MAOVQ,EAAsB,SAACC,EAAoBC,GACtD,IAAIC,EACJ,IAAKF,EAAOG,KAAKC,MAAMf,QAAUW,EAAOK,SAASD,MAAMf,MACrD,OAAO,EAGT,GAAIY,EACF,OAAO,EAGT,IAAKC,KAAOF,EACV,GAAIA,EAAOE,GAAKE,MAAME,OAAUN,EAAOE,GAAKV,WAAaQ,EAAOE,GAAKE,MAAMf,MACzE,OAAO,EAIX,OAAO,GCrCIkB,EAAW,SAACC,EAAiBlB,EAAkBE,GAAkC,IAAD,EACjEiB,mBAAiBD,GADgD,mBACpFnB,EADoF,KAC7EqB,EAD6E,OAEvDD,mBAAiB,IAFsC,mBAEpFE,EAFoF,KAExEC,EAFwE,KAc3F,MAAO,CAACvB,QAAOsB,aAAYE,SAVV,SAACC,GAChB,IAAMC,EAAcD,EAAIE,OAAO3B,MAC/BD,EAAY2B,EAAazB,EAAMsB,EAAepB,GAC9CkB,EAASK,IAO0BE,OAJtB,WACb7B,EAAYC,EAAOC,EAAMsB,EAAepB,IAGGc,MAAOY,QAAQP,GAAaD,aCzB9DS,EAAgB,QCAhBC,EAAiB,SAACC,GAAD,OAC5B,IAAIC,SAAQ,SAACC,GACX,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,GACrBG,EAAOG,OAAS,WACd,GAA6B,kBAAlBH,EAAOI,OAAqB,CACrC,IAAMA,EAASJ,EAAOI,OAAOC,MAAM,WAAW,GAC9CN,EAAQK,SAOHE,EAAe,SAACC,GAC3B,IAAMC,EAAOC,KAAKC,UAAUH,GAE5B,OADAI,QAAQC,IAAI,SAAUJ,GACf,IAAIV,SAAQ,SAACC,GAClBc,YAAW,kBAAMd,EAAQS,KAAO,S,OCX9BM,EAAgB,CACpB,CAACC,MAAO,uCAAUlD,MAAO,YACzB,CAACkD,MAAO,uCAAUlD,MAAO,aACzB,CAACkD,MAAO,iCAASlD,MAAO,WAoHXmD,EAjHF,WAAoB,IAAD,IACI/B,oBAAkB,GADtB,mBACvBgC,EADuB,KACZC,EADY,KAExBrB,EFLe,WAAgB,IAAD,EACZZ,mBAAsB,MADV,mBAC7BY,EAD6B,KACvBsB,EADuB,OAEVlC,oBAAkB,GAFR,mBAE7BH,EAF6B,KAEtBsC,EAFsB,OAGFnC,mBAAiB,IAHf,mBAG7BoC,EAH6B,KAGlBtD,EAHkB,KAqBpC,MAAO,CAAC8B,OAAMR,SAhBG,SAACC,GAAwC,IAAD,EACvD,GAAI,UAACA,EAAIE,OAAO8B,aAAZ,aAAC,EAAkBhD,OAAvB,CAGA,IAAMiD,EAAajC,EAAIE,OAAO8B,MAAM,GAChCC,EAAWC,KAAO7B,IAAkBb,GACtCsC,GAAS,GACTrD,EAAa,gGAAD,OAAsB4B,EAAtB,oBAEZyB,GAAS,GACTrD,EAAa,KAGfoD,EAAQI,KAGczC,QAAOuC,YAAWF,WEhB7BM,GACPjD,GAAkB,mBACrBb,EAAWgB,KAAO,CAACA,KAAMhB,EAAWgB,KAAMoC,MAAO,8CAAY/C,UAAU,EAAOY,MAAOG,EAAS,GAAIpB,EAAWgB,MAAM,KAD9F,cAErBhB,EAAWkB,SAAW,CAACF,KAAMhB,EAAWkB,SAAUkC,MAAO,sEAAgB/C,UAAU,EAAOY,MAAOG,EAAS,GAAIpB,EAAWkB,UAAU,KAF9G,cAGrBlB,EAAWM,MAAQ,CAACU,KAAMhB,EAAWM,MAAO8C,MAAO,4BAAc/C,UAAU,EAAMY,MAAOG,EAAS,GAAIpB,EAAWM,OAAO,KAHlG,cAIrBN,EAAWS,QAAU,CAACO,KAAMhB,EAAWS,QAAS2C,MAAO,kFAAkB/C,UAAU,EAAMY,MAAOG,EAAS,GAAIpB,EAAWS,SAAS,KAJ5G,cAKrBT,EAAW+D,OAAS,CAAC/C,KAAMhB,EAAW+D,OAAQX,MAAO,4EAAiB/C,UAAU,EAAMY,MAAOG,EAAS,GAAIpB,EAAW+D,QAAQ,KALxG,GAOlBC,EAAcC,OAAOC,KAAKrD,GAAQF,OAElCwD,EAAY,uCAAG,WAAOxC,GAAP,yBAAAyC,EAAA,yDACnBzC,EAAI0C,iBACEC,EAAuB,CAC3BtD,MAAM,UAAAH,EAAOG,YAAP,eAAaC,MAAMf,QAAS,KAClCgB,UAAU,UAAAL,EAAOK,gBAAP,eAAiBD,MAAMf,QAAS,KAC1CI,MAAK,UAAEO,EAAOP,aAAT,aAAE,EAAcW,MAAMf,MAC3BO,QAAO,UAAEI,EAAOJ,eAAT,aAAE,EAAgBQ,MAAMf,MAC/BqE,YAAW,UAAE1D,EAAOkD,cAAT,aAAE,EAAe9C,MAAMf,MAClCsE,MAAO,OAGLtC,EAAKA,KAXU,gCAYOD,EAAeC,EAAKA,MAZ3B,OAYjBoC,EAAUE,MAZO,cAenBjB,GAAa,GAGbZ,EAAa2B,GACVG,MAAK,WAGJ,IAAI1D,EACJ,IAAKA,KAHLwC,GAAa,GACbmB,IAAK,GAAI,0LAAqC,WAElC7D,EAAQ,CAAC,IAAD,IAClB,aAAAA,EAAOE,GAAKE,OAAMM,gBAAlB,gBAA6B,IAE/BW,EAAKsB,QAAQ,SA1BE,2CAAH,sDA8BlB,OACE,uBAAMmB,SAAUR,EAAhB,UAEE,cAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,MAAM,SAASC,GAAI,EAAGC,GAAI,EAAlE,4HAIA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,gBAAgBC,QAAS,EAAGC,EAAG,EAA9D,UACGrB,OAAOsB,OAAO1E,GAAQ2E,KAAI,WAA6CC,GAAmB,IAA9DzE,EAA6D,EAA7DA,KAAMoC,EAAuD,EAAvDA,MAAO/C,EAAgD,EAAhDA,SAAUY,EAAsC,EAAtCA,MAC5CyE,EAAQ,eAAOzE,GAGrB,cAFOyE,EAASnE,SAGd,cAAC2D,EAAA,EAAD,CAAMS,MAAI,EAAYC,GAAI,GAAIC,MAAOJ,EAAOK,GAAa,WAAT9E,EAAoB,EAAI,GAAxE,SACE,cAAC+E,EAAA,EAAD,yBACEC,WAAS,EACT5C,MAAOA,EACPyB,QAAQ,WACRxE,SAAUA,EACV0D,OAAiB,WAAT/C,EACRiF,KAAe,YAATjF,EAAqB,OAAIkF,EAC/BC,UAAoB,YAATnF,EACXoF,oBAAqB,CAACC,GAAI,CAACC,SAAU,WAAYC,IAAK,UAClDb,GATN,aAWG1E,IAAShB,EAAW+D,QACrBZ,EAAcqC,KAAI,gBAAEtF,EAAF,EAAEA,MAAOkD,EAAT,EAASA,MAAT,OAChB,cAACoD,EAAA,EAAD,CAAsBtG,MAAOA,EAA7B,SACGkD,GADYlD,UAdLc,MAwBpB,eAACkE,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAGD,MAAO7B,EAAc,EAA/C,UACE,eAACyC,EAAA,EAAD,CAAQ3B,UAAU,QAAQD,QAAQ,WAAWmB,WAAS,EAACK,GAAI,CAACK,OAAQ,QAApE,oHAEE,uBAAOvG,KAAK,OAAOwG,QAAM,EAACC,OAAO,wBAAwBlF,SAAUQ,EAAKR,cAExEQ,EAAKA,MACL,cAAC2E,EAAA,EAAD,CAAgB1F,MAAOe,EAAKf,MAAOkF,GAAI,CAACC,SAAU,YAAlD,SAEIpE,EAAKf,MACDe,EAAKwB,UADT,oCAEaxB,EAAKA,KAAKlB,WAM/B,cAACkE,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,GAAIC,MAAO7B,EAA1B,SACE,cAACyC,EAAA,EAAD,CACE5C,KAAK,QACLmC,WAAS,EACTnB,QAAQ,YACR1E,KAAK,SAEL2G,SAAUlG,EAAoBC,EAAQqB,EAAKf,QAAUmC,EANvD,SAQGA,EAAY,sDAAgB,oECvG1ByD,MAZf,WACE,OACE,cAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,SAAS4B,WAAW,SAASC,UAAU,QAAtE,SACE,cAAC/B,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAvB,SACE,cAACoB,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACE,cAAC,EAAD,W,MCJVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.019dd684.chunk.js","sourcesContent":["import { IUseInput } from '../hooks/useInput';\n\nexport enum InputNames {\n  name = 'name',\n  lastname = 'lastname',\n  email = 'email',\n  message = 'message',\n  select = 'select',\n}\n\nexport interface IInputData {\n  name: InputNames;\n  label: string;\n  required: boolean;\n  props: IUseInput;\n}\n\nexport type InputsData = {\n  [ key in keyof typeof InputNames ]: IInputData;\n};\n\nexport interface IFormData {\n  name: string | null,\n  lastname: string | null,\n  email: string,\n  message: string,\n  messageType: string,\n  image: string | null,\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { InputsData, InputNames } from '../types/types';\n\nconst validateEmail = (email: string) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email.toLowerCase());\n};\n\nexport const checkInputs = (\n  value: string,\n  type: InputNames,\n  setErrorText: Dispatch<SetStateAction<string>>,\n  required: boolean,\n): void => {\n  !value && required\n    ? setErrorText('Обязательное поле')\n    : setErrorText('');\n\n  switch (type) {\n    case InputNames.email:\n      !validateEmail(value)\n        ? setErrorText('Некорректный email')\n        : setErrorText('');\n      break;\n    case InputNames.message:\n      value.trim().length < 10\n        ? setErrorText('Введите как минимум 10 символов')\n        : setErrorText('');\n      break;\n    default:\n      break;\n  }\n};\n\nexport const getIsSubmitDisabled = (inputs: InputsData, fileError: boolean): boolean => {\n  let key: keyof typeof InputNames;\n  if (!inputs.name.props.value && !inputs.lastname.props.value) {\n    return true;\n  }\n\n  if (fileError) {\n    return true;\n  }\n\n  for (key in inputs) {\n    if (inputs[key].props.error || (inputs[key].required && !inputs[key].props.value)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","import { ChangeEvent, Dispatch, SetStateAction, useState } from 'react';\nimport { checkInputs } from '../utils/validates';\nimport { InputNames } from '../types/types';\n\nexport interface IUseInput {\n  value: string;\n  onBlur: () => void;\n  onChange: (evt: ChangeEvent<HTMLInputElement>) => void;\n  helperText: string;\n  error: boolean;\n  setValue?: Dispatch<SetStateAction<string>>;\n}\n\nexport const useInput = (initial: string, type: InputNames, required: boolean): IUseInput => {\n  const [value, setValue] = useState<string>(initial);\n  const [helperText, setHelperText] = useState<string>('');\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = evt.target.value;\n    checkInputs(targetValue, type, setHelperText, required);\n    setValue(targetValue);\n  };\n\n  const onBlur = () => {\n    checkInputs(value, type, setHelperText, required);\n  };\n\n  return {value, helperText, onChange, onBlur, error: Boolean(helperText), setValue};\n};\n","import { ChangeEvent, Dispatch, SetStateAction, useState } from 'react';\n\nexport const MAX_FILE_SIZE = 2097152;\n\ninterface IUseFile {\n  file: File | null;\n  onChange: (evt: ChangeEvent<HTMLInputElement>) => void;\n  error: boolean;\n  errorText: string;\n  setFile: Dispatch<SetStateAction<File | null>>\n}\n\nexport const useFile = ():IUseFile => {\n  const [file, setFile] = useState<File | null>(null);\n  const [error, setError] = useState<boolean>(false);\n  const [errorText, setErrorText] = useState<string>('');\n\n  const onChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    if (!evt.target.files?.length) {\n      return;\n    }\n    const loadedFile = evt.target.files[0];\n    if (loadedFile.size > MAX_FILE_SIZE && !error) {\n      setError(true);\n      setErrorText(`Превышен размер в ${MAX_FILE_SIZE / 1024 / 1024} Мб`)\n    } else {\n      setError(false);\n      setErrorText('');\n    }\n\n    setFile(loadedFile);\n  }\n\n  return {file, onChange, error, errorText, setFile};\n};\n","import { IFormData } from '../types/types';\n\nexport const encodeToBase64 = (file: File): Promise<string> => (\n  new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        const result = reader.result.split('base64,')[1];\n        resolve(result);\n      }\n    };\n  })\n);\n\n// TODO: remove fake send data\nexport const fakeSendData = (data: IFormData): Promise<string> => {\n  const json = JSON.stringify(data);\n  console.log('data: ', json);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(json), 1000);\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, FormHelperText, Grid, MenuItem, TextField, Typography } from '@mui/material';\nimport swal from 'sweetalert';\nimport { useInput } from '../../hooks/useInput';\nimport { useFile } from '../../hooks/useFile';\nimport { IFormData, IInputData, InputsData, InputNames } from '../../types/types';\nimport { getIsSubmitDisabled } from '../../utils/validates';\nimport { encodeToBase64, fakeSendData } from '../../utils/common';\n\nconst selectOptions = [\n  {label: 'Вопрос', value: 'question'},\n  {label: 'Жалоба', value: 'complaint'},\n  {label: 'Отзыв', value: 'review'},\n];\n\nconst Form = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const file = useFile();\n  const inputs: InputsData = {\n    [InputNames.name]: {name: InputNames.name, label: 'Ваше имя', required: false, props: useInput('', InputNames.name, false)},\n    [InputNames.lastname]: {name: InputNames.lastname, label: 'Ваша фамилия', required: false, props: useInput('', InputNames.lastname, false)},\n    [InputNames.email]: {name: InputNames.email, label: 'Ваш E-mail', required: true, props: useInput('', InputNames.email, true)},\n    [InputNames.message]: {name: InputNames.message, label: 'Ваше сообщение', required: true, props: useInput('', InputNames.message, true)},\n    [InputNames.select]: {name: InputNames.select, label: 'Тип сообщения', required: true, props: useInput('', InputNames.select, true)},\n  };\n  const inputsCount = Object.keys(inputs).length;\n\n  const handleSubmit = async (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    const dataToAPI: IFormData = {\n      name: inputs.name?.props.value || null,\n      lastname: inputs.lastname?.props.value || null,\n      email: inputs.email?.props.value as string,\n      message: inputs.message?.props.value as string,\n      messageType: inputs.select?.props.value as string,\n      image: null,\n    };\n\n    if (file.file) {\n      dataToAPI.image = await encodeToBase64(file.file);\n    }\n\n    setIsLoading(true);\n\n    //TODO: add send data logic\n    fakeSendData(dataToAPI)\n      .then(() => {\n        setIsLoading(false);\n        swal('', 'Отправка данных выполнена успешно', 'success');\n        let key: keyof typeof InputNames;\n        for (key in inputs) {\n          inputs[key].props.setValue?.('');\n        }\n        file.setFile(null);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} >\n\n      <Typography variant='h4' component='h1' align='center' mb={4} pt={2}>\n        Форма обратной связи\n      </Typography>\n\n      <Grid container justifyContent='space-between' spacing={4} p={4}>\n        {Object.values(inputs).map(({name, label, required, props}: IInputData, index: number) => {\n          const ownProps = {...props};\n          delete ownProps.setValue;\n\n          return (\n            <Grid item key={name} xs={12} order={index} md={name === 'select' ? 5 : 12}>\n              <TextField\n                fullWidth\n                label={label}\n                variant='outlined'\n                required={required}\n                select={name === 'select'}\n                rows={name === 'message' ? 4 : undefined}\n                multiline={name === 'message'}\n                FormHelperTextProps={{sx: {position: 'absolute', top: '100%'}}}\n                {...ownProps}\n              >\n                {name === InputNames.select &&\n                selectOptions.map(({value, label}) => (\n                  <MenuItem key={value} value={value}>\n                    {label}\n                  </MenuItem>\n                ))\n                }\n              </TextField>\n            </Grid>\n          )\n        })}\n\n        <Grid item xs={12} md={5} order={inputsCount - 2}>\n          <Button component='label' variant='outlined' fullWidth sx={{height: '100%'}}>\n            Загрузить картинку\n            <input type='file' hidden accept='image/jpeg, image/png' onChange={file.onChange} />\n          </Button>\n          { file.file &&\n            <FormHelperText error={file.error} sx={{position: 'absolute'}}>\n              {\n                file.error\n                  ? file.errorText\n                  : `Файл: ${file.file.name}`\n              }\n            </FormHelperText>\n          }\n        </Grid>\n\n        <Grid item xs={12} order={inputsCount}>\n          <Button\n            size='large'\n            fullWidth\n            variant='contained'\n            type='submit'\n\n            disabled={getIsSubmitDisabled(inputs, file.error) || isLoading}\n          >\n            {isLoading ? 'Отправка...' : 'Отправить'}\n          </Button>\n        </Grid>\n      </Grid>\n\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport { Grid, Paper } from '@mui/material';\nimport Form from './components/Form/Form';\n\nfunction App() {\n  return (\n    <Grid container justifyContent='center' alignItems='center' minHeight='100vh'>\n      <Grid item xs={11} md={8}>\n        <Paper elevation={3}>\n          <Form />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}